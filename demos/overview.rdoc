= Knock Out!

KO! is a BDD framework for Ruby. Inspired by the discontinuation of Shoulda
excellent context system, it seemed time Ruby had a lean but elegant
behavior-oriented test system.

KO! specifications are composed of *contexts*, *features*, "scenarios" and,
of course, *assertions*.

Contexts are used to setup and teardown reusable fixtures.

Features define the overall requirements that a set of scenarios are intended
to demonstrate.

Scenarios compose the descriptive "proof" of a feature, via assertions.

Rather than define yet another assertions system KO! uses the excellent
AE[http://protuils.github.com/ae] system.

Here is a simple example. First we will define a reusable fixture:

  context "Calculator Instance" do

    setup do
      require 'calculator'
      calculator = Calculater.new
    end

  end

Then when we define a feature which utilizes the fixture:

  feature "Calculator Additon" do

    use "Calculator Instance"

    scenario "add two positive numbers" do
      calculator.push 2
      calculator.push 2
      calculator.add
      calculator.output.assert == 4
    end

    scenario "add two negative numbers" do
      calculator.push -2
      calculator.push -2
      calculator.add
      calculator.output.assert == -4
    end

  end

