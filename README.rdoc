= KO!

This is KDD --Kickass Driven Development!

Knockout is a Ruby test framework that thinks the way a tester does.
More specifically, KO! is a behavior-driven design system created to 

KO! was inspired in part by the void left behind with the discontinuation
Shoulda. It seemed like it was about time time Ruby had a elegant, modern
and *lean* testing framework.

KO "tests" are devided up into *contexts*, *features*, *scenarios*,  and
*assertions*.

Rather than define yet another assertions system KO! uses the excellent
AE[http://proutils.github.com/ae] system.

== SYNOPSIS

=== Writing Specs

KO! specifications... well here's an fracking example.

  context "String Instance" do
    setup do
      @string = "Hello World"
    end

    cleanup do
    end
  end

  feature "String Indexing" do
    use "String Instance"

    scenario "index by substring" do
      @string.index('H').assert == 0
      @string.index('l').assert == 2
      @string.index('ld').assert == 9
    end

    scenario "index by regular expression" do
      @string.index(/H/).assert == 0
      @string.index(/l/).assert == 2
      @string.index(/o\ /).assert == 4
    end
  end

Get it? You create reusable contexts --they can load libraries, build out mocks,
setup fixtures, etc. Then use use them to test out feature scenarios.

Of course, generally you won't define the contexts in the same file
with the features. You will put those in separate files in the context
drectory where it will be loaded up automatically ready to be used.

Oh, if you are a Cuke you can use captialized method names instead.

=== Running Those Suckers

Running KO! scripts is like this.

  $ ko -Ilib path/to/feature


== LEGAL

Copyright (c) 2010 Thomas Sawyer, Apache License 2.0


