= KO!

This is KDD --Kickass Driven Development!

Knockout is a Ruby test framework that reads like a developer thinks.
More specifically, KO! is a behavior-driven design system created to 
breakdown the systems analysis proccess into clear and obvious divisions.
KO "tests" are divided-up into *contexts*, *features*, *scenarios*,  and
*assertions*.

Contexts are used to setup and teardown reusable fixtures. They can be
used as the feature or scenario level.

Features delineate the overall requirement that a set of scenarios are
designed to demonstrate.

Scenarios compose the descriptive "proof" of a feature, via assertions.

Rather than define yet another assertions system KO! uses the excellent
AE[http://proutils.github.com/ae] framework.

KO! was inspired in part by the void left behind by the discontinuation of
Shoulda as a test framework. It seemed like an opportune time to give Ruby an
elegant, modern and light-weight BDD framework to serve as an alternative to
the monolithic RSpec.


== SYNOPSIS

=== Writing Specs

KO! specifications... well here's an fracking example.

  context "String Instance" do
    before :all do
      @string = "Hello World"
    end
  end

  feature "String Indexing" do
    use "String Instance"

    scenario "index by substring" do
      to do |substring|
        @string.index(substring)
      end

      ok 'H'  => 0
      ok 'l'  => 2
      ok 'ld' => 9
    end

    scenario "index by regular expression" do
      to do |regular_expression|
        @string.index(regular_expression)
      end

      ok /H/   => 0
      ok /l/   => 2
      ok /o\ / => 4
    end
  end

Get it? You create reusable contexts --they can load libraries, build out mocks,
setup fixtures, etc. Then use use them to test out feature scenarios.

Of course, generally you won't define the contexts in the same file
with the features. You will put those in separate files in the context
drectory where it will be loaded up automatically ready to be used.

Oh, if you are a Cuke you can use captialized method names instead.

=== Running Those Suckers

Running KO! scripts is like this.

  $ ko -Ilib path/to/requirements/*.rb


== STATUS

KO! is pretty new, but it's also pretty straight-forward. It still needs
some work, for instance, on they way in which context are injected into 
features and/or sceanrios, but it works well enough as it is for general
wide-spread use.


== LEGAL

Copyright (c) 2010 Thomas Sawyer, Apache License 2.0


